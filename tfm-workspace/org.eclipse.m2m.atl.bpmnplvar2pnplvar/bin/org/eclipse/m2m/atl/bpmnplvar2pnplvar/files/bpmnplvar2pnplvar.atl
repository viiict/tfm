-- @nsURI pnplVariability:/PNPL_variability/model/pnpl_variability
-- @nsURI pns:http://www.petrinets.org/
-- @nsURI bpmnplVariability:http://www.example.org/bpmnpl_variability 
-- @nsURI bpmn:http://www.example.org/bpmn

module bpmnplvar2pnplvar;
create  OUTVar : pnplVariability from INPN : pns, INVar : bpmnplVariability, INBPMN : bpmn;


-------------------------------------------------------------------
---------------------------- ROOT VAR -----------------------------
-------------------------------------------------------------------
helper context OclAny def: isBPMNElement() : Boolean = 
	if (self.oclIsKindOf(bpmn!BPMNElement)) then
		true
	else
		false
	endif;

helper context bpmn!BPMNElement def: getID(): String = self.refGetValue('ID');

rule rootVar {
	from
		bpmnVar: bpmnplVariability!Variability
		
	to
		pnVar: pnplVariability!Variability (
			featuremodel <- bpmnVar.featuremodel,
			petrinet <- bpmnVar.bpmn
		)
}
 
rule bpmnFileUri2pnsFileUri {
	from
		bpmnUri: bpmnplVariability!FileURI
		
	to
		pnUri: pnplVariability!FileURI (
			importURI <- bpmnUri.importURI	
		)
}

rule bpmnPC2pnsPC (bpmnPC: bpmnplVariability!PresenceCondition, pn: pns!PetriNet, pnVar: pnplVariability!Variability){
	using {
		elems : Sequence(INBPMN!BPMNElement)  = bpmnPC.elements;
	}	

	to
		pnPC: pnplVariability!PresenceCondition(
			--elements <- bpmnPC.elements,
			expression <- bpmnPC.expression
		)
	do {
		'aiuda'.println();
		for(e in elems){
			if(e.isBPMNElement()){
			
				e.getID().println();
				'HOLAAAAAAAAAA'.println();
				for(pnPlace in pn.places){
					pnPlace.println();
					if(pnPlace.name.split('_').includes(e.ID) = true){
						pnPC.elements.add(pnPlace);
						'funcionaPlace'.println();
					}
				}
				for(pnTrans in pn.trans){
					if(pnTrans.name.split('_').includes(e.ID) = true){
						pnPC.elements.add(pnTrans);
						'funcionaTrans'.println();
					}				
				}
				for(pnArc in pn.arcs){
					if(pnArc.name.split('_').includes(e.ID) = true){
						pnPC.elements.add(pnArc);
						'funcionaArc'.println();
					}
				}
			}

		}
	}

}


rule addPC(pnVar: pnplVariability!Variability, pnPC: pnplVariability!PresenceCondition){
	do {
		'holaMundo'.println();
		pnVar.presencecondition.add(pnPC);
	}
}
---------------------------------------------------------------------
---------------------------- EXPRESSION -----------------------------
---------------------------------------------------------------------


rule bpmnFeature2pnsFeature {
	from
		bpmnF: bpmnplVariability!Feature
		
	to
		pnF: pnplVariability!Feature(
			feature <- bpmnF.feature	
		)
}


rule bpmnUE2pnsUE {
	from 
		bpmnUE: bpmnplVariability!UnaryExpression
	to 
		pnUE: pnplVariability!UnaryExpression(
			operator <- bpmnUE.operator,
			right <-bpmnUE.right
		)
}

rule bpmnBE2pnsBE {
	from 
		bpmnBE: bpmnplVariability!BinaryExpression
	to 
		pnBE: pnplVariability!BinaryExpression(
			operator <- bpmnBE.operator,
			right <-bpmnBE.right,
			left <- bpmnBE.left
		)
}

endpoint rule thisistheend() {
	do {

		for(pc in bpmnplVariability!PresenceCondition.allInstances()){
			thisModule.bpmnPC2pnsPC(pc, pns!PetriNet.allInstancesFrom('INPN').first(), pnplVariability!Variability.allInstancesFrom('OUTVar').first());
		}
		for(pnpc in pnplVariability!PresenceCondition.allInstancesFrom('OUTVar')) {
			pnplVariability!Variability.allInstances().first().presencecondition.add(pnpc);
		}
	}
}

